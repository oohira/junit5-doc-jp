plugins {
	id 'me.champeau.gradle.jmh' version '0.4.7'
}

apply from: "$rootDir/gradle/testing.gradle"

test {
	// Tests in `AutomaticModuleNameTests` depend on all and these jars. #894
	dependsOn(
		project(':junit-jupiter-migrationsupport').jar,
		project(':junit-platform-surefire-provider').jar
	)
	useJUnitPlatform {
		excludeTags 'exclude'
	}
}

dependencies {
	// --- Things we are testing --------------------------------------------------
	testImplementation(project(':junit-platform-commons'))
	testImplementation(project(':junit-platform-console'))
	testImplementation(project(':junit-platform-engine'))
	testImplementation(project(':junit-platform-launcher'))

	// --- Things we are testing with ---------------------------------------------
	testImplementation(project(':junit-platform-runner'))
	testImplementation(project(path: ':junit-platform-engine', configuration: 'testArtifacts'))
	testImplementation(project(path: ':junit-jupiter-engine', configuration: 'testArtifacts'))
	testImplementation("org.apiguardian:apiguardian-api:${apiGuardianVersion}")

	// --- Test run-time dependencies ---------------------------------------------
	testRuntimeOnly(project(':junit-vintage-engine'))
	testRuntimeOnly('org.codehaus.groovy:groovy-jsr223:' + GroovySystem.getVersion()) {
		because 'Tests annotated with @EnabledIf(engine = "groovy", ...) need it.'
	}

	// --- http://openjdk.java.net/projects/code-tools/jmh/ -----------------------
	jmh("org.openjdk.jmh:jmh-core:${jmhVersion}") {
		exclude group: 'net.sf.jopt-simple', module: 'jopt-simple'
	}
	jmhAnnotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}")
	jmh(project(':junit-jupiter-api'))
	jmh("junit:junit:${junit4Version}")
}

jmh {
	jmhVersion = "${jmhVersion}"

	duplicateClassesStrategy = DuplicatesStrategy.WARN
	fork = 0 // Too long command line on Windows...
	warmupIterations = 1
	iterations = 5
}

checkstyleJmh { // use same style rules as defined for tests
	configFile = rootProject.file('src/checkstyle/checkstyleTest.xml')
}

eclipse {
	classpath {
		plusConfigurations += [ project(':junit-platform-console').configurations.shadowed ]
	}
}

idea {
	module {
		scopes.PROVIDED.plus += [ project(':junit-platform-console').configurations.shadowed ]
	}
}
