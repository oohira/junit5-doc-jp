sourceSets {
	functionalTest {
		groovy.srcDir file('src/functTest/groovy')
		resources.srcDir file('src/functTest/resources')
		compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
		runtimeClasspath += output + compileClasspath
	}
}

task functionalTest(type: Test) {
	description = 'Runs the functional tests.'
	group = 'verification'
	testClassesDirs = sourceSets.functionalTest.output.classesDirs
	classpath = sourceSets.functionalTest.runtimeClasspath
	mustRunAfter test

	reports {
		html.destination = project.file("$html.destination/functional")
		junitXml.destination = project.file("$junitXml.destination/functional")
	}
}

check.dependsOn functionalTest

gradlePlugin {
	testSourceSets sourceSets.functionalTest
}

task createClasspathManifests {
	description = 'Generate classpath manifests for functional tests so that they can reference locally built libraries for use with Gradle Test Kit'

	ext.functionalTestClasspathsDir = file("$buildDir/functionalTestClasspathManifests")
	inputs.files configurations.functionalTestCompile
	inputs.files configurations.functionalTestRuntime
	outputs.dir functionalTestClasspathsDir

	doLast {
		functionalTestClasspathsDir.mkdirs()
		file("$functionalTestClasspathsDir/test-compile-classpath.txt").text = configurations.functionalTestCompile.join(System.lineSeparator())
		file("$functionalTestClasspathsDir/test-runtime-classpath.txt").text = configurations.functionalTestRuntime.join(System.lineSeparator())
	}
}

dependencies {
	functionalTestCompile project(':junit-jupiter-api')
	functionalTestRuntime project(':junit-platform-console')
	functionalTestRuntime project(':junit-jupiter-engine')
	testRuntimeOnly files(createClasspathManifests)
}
