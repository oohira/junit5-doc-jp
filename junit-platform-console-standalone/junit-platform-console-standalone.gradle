apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath("com.github.jengelman.gradle.plugins:shadow:${shadowVersion}")
	}
}

dependencies {
	shadow(project(':junit-platform-console'))
	shadow(project(':junit-jupiter-engine'))
	shadow(project(':junit-jupiter-params'))
	shadow(project(':junit-vintage-engine'))

	testCompileOnly(project(':junit-jupiter-api'))
	testCompileOnly(project(path: ':junit-jupiter-params', configuration: 'shadow'))
	testCompileOnly("junit:junit:${junit4Version}")
}

sourceSets.main.compileClasspath += configurations.shadow

jar {
	manifest {
		// Note: do not add `'Automatic-Module-Name': ...` because this artifact is not
		// meant to be used on the Java 9 module path.
		// See https://github.com/junit-team/junit5/issues/866#issuecomment-306017162
		attributes(
			'Main-Class': 'org.junit.platform.console.ConsoleLauncher'
		)
	}
}

javadoc {
	classpath = project.sourceSets.main.compileClasspath + configurations.shadow
}

jar.enabled = false
test.enabled = false // prevent supposed-to-fail integration tests from failing the build
japicc.enabled = false

shadowJar {
	// Generate shadow jar only if the underlying manifest was regenerated.
	// See https://github.com/junit-team/junit5/issues/631
	onlyIf {
		(project.generateManifest || !shadowJar.archivePath.exists())
	}

	dependsOn(
		project(':junit-platform-console').shadowJar,
		project(':junit-jupiter-params').shadowJar
	)

	classifier = null
	configurations = [project.configurations.shadow]

	// https://github.com/junit-team/junit5/issues/761
	// prevent duplicates, add 3rd-party licenses explicitly
	exclude 'META-INF/LICENSE*.md'
	from(project(':junit-platform-console').projectDir) {
		include 'LICENSE-jopt-simple.md'
		into 'META-INF'
	}
	from(project(':junit-jupiter-params').projectDir) {
		include 'LICENSE-univocity-parsers.md'
		into 'META-INF'
	}

	mergeServiceFiles()
	manifest {
		inheritFrom project.tasks.jar.manifest
		attributes(
			'Specification-Title': project.name,
			'Implementation-Title': project.name,
			// Generate test engine version information in single shared manifest file.
			// Pattern of key and value: `'Engine-Version-{YourTestEngine#getId()}': '47.11'`
			'Engine-Version-junit-jupiter': rootProject.version,
			'Engine-Version-junit-vintage': vintageVersion,
			// Version-aware binaries are already included - set Multi-Release flag here.
			// See http://openjdk.java.net/jeps/238 for details
			// Note: the "jar --update ... --release X" command does not work with the
			// shadowed JAR as it contains nested classes that do comply multi-release jars.
			'Multi-Release': 'true'
		)
	}
}


artifacts {
	archives shadowJar
}

task standaloneExec(type: JavaExec, dependsOn: [shadowJar, testClasses]) {
	ignoreExitValue = true
	workingDir = "$buildDir/libs"
	jvmArgs = ['-ea', "-Djava.util.logging.config.file=$buildDir/resources/test/logging.properties"]
	main = '-jar'
	args = [
		"$shadowJar.archiveName",
		'--scan-classpath',
		'--include-classname', 'standalone.*',
		'--classpath', "$buildDir/classes/java/test",
		'--details', 'tree'
	]
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
}

task standaloneCheck(dependsOn: standaloneExec) {
	doLast {
		String text = standaloneExec.errorOutput.toString() + standaloneExec.standardOutput.toString()
		// engines -- output depends on default logging configuration
		assert text.contains("junit-jupiter (group ID: org.junit.jupiter, artifact ID: junit-jupiter-engine, version: $rootProject.version")
		assert text.contains("junit-vintage (group ID: org.junit.vintage, artifact ID: junit-vintage-engine, version: $vintageVersion")
		// tree node names
		assert text.contains("JUnit Jupiter")
		assert text.contains("JupiterIntegration")
		assert text.contains("abort()") && text.contains("Assumption failed: integration-test-abort")
		assert text.contains("successful()")
		assert text.contains("disabled()") && text.contains("integration-test-disabled")
		assert text.contains("fail()") && text.contains("integration-test-fail")
		assert text.contains("JUnit Vintage")
		assert text.contains("VintageIntegration")
		assert text.contains("ignored") && text.contains("integr4tion test")
		assert text.contains("f4il") && text.contains("f4iled")
		assert text.contains("succ3ssful")
		assert text.contains("JupiterParamsIntegration")
		assert text.contains("[1] argument=test")
		// summary
		assert text.contains("Test run finished after")
		// container summary
		assert text.contains("6 containers found")
		assert text.contains("0 containers skipped")
		assert text.contains("6 containers started")
		assert text.contains("0 containers aborted")
		assert text.contains("6 containers successful")
		assert text.contains("0 containers failed")
		// tests summary
		assert text.contains("8 tests found")
		assert text.contains("2 tests skipped")
		assert text.contains("6 tests started")
		assert text.contains("1 tests aborted")
		assert text.contains("3 tests successful")
		assert text.contains("2 tests failed")
	}
}

check.dependsOn(standaloneCheck)
