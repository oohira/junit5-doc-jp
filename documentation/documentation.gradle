import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
	dependencies {
		// upgrade to latest jruby version due to a bugfix needed for Windows 10.
		// can be removed, when asciidoctorj uses this as a default version.
		classpath('org.jruby:jruby-complete:9.1.15.0')

		// classpath('org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.16')
		classpath('org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16')
		classpath('org.asciidoctor:asciidoctorj-diagram:1.5.4.1')
	}
}

plugins {
	id 'org.asciidoctor.convert' version '1.5.7'
}

apply plugin: 'org.junit.platform.gradle.plugin'

junitPlatform {
	details 'tree'
	filters {
		includeClassNamePattern '.+(Tests|Demo)$'
		tags {
			exclude 'exclude'
		}
	}
	logManager 'org.apache.logging.log4j.jul.LogManager'
}

/*
test {
	scanForTestClasses = false
	include(['example/DocumentationTestSuite.class'])
}
*/

dependencies {
	asciidoctor('org.jruby:jruby-complete:9.1.15.0')

	testImplementation(project(':junit-jupiter-api'))
	testImplementation(project(path: ':junit-jupiter-params', configuration: 'shadow'))
	testImplementation(project(':junit-platform-runner'))
	testImplementation(project(':junit-platform-launcher'))
	if (gradle.ext.kotlinIsSupported) testImplementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")

	// Include junit-platform-console so that the JUnit Gradle plugin
	// uses the local version of the ConsoleLauncher.
	testRuntimeOnly(project(path: ':junit-platform-console', configuration: 'shadow'))

	testRuntimeOnly(project(':junit-vintage-engine'))
	testRuntimeOnly(project(':junit-jupiter-engine'))
	testRuntimeOnly("org.apache.logging.log4j:log4j-core:${log4jVersion}")
	testRuntimeOnly("org.apache.logging.log4j:log4j-jul:${log4jVersion}")

	// for ApiReportGenerator
	testImplementation("io.github.lukehutch:fast-classpath-scanner:2.11.0")
}

asciidoctorj {
	version = '1.5.6'
}

ext {
	generatedAsciiDocPath = buildDir.toPath().resolve('generated/asciidoc')
	consoleLauncherOptionsFile = generatedAsciiDocPath.resolve('console-launcher-options.txt')
	experimentalApisTableFile = generatedAsciiDocPath.resolve('experimental-apis-table.txt')
}

def createJavaExecTaskWithOutputFile(taskName, outputFile, mainClass, mainArgs = []) {
	task(taskName, type: JavaExec) {
		outputs.file outputFile.toFile()
		classpath = sourceSets.test.runtimeClasspath
		main = mainClass
		args = mainArgs
		standardOutput = new ByteArrayOutputStream()
		doLast {
			java.nio.file.Files.createDirectories(outputFile.parent)
			java.nio.file.Files.write(outputFile, standardOutput.toByteArray())
		}
	}
}

createJavaExecTaskWithOutputFile('generateConsoleLauncherOptions', consoleLauncherOptionsFile, 'org.junit.platform.console.ConsoleLauncher', ['--help'])

createJavaExecTaskWithOutputFile('generateExperimentalApisTable', experimentalApisTableFile, 'org.junit.api.tools.ApiReportGenerator')

asciidoctor {
	dependsOn 'generateConsoleLauncherOptions', 'generateExperimentalApisTable'

	// enable the Asciidoctor Diagram extension
	requires 'asciidoctor-diagram'

	separateOutputDirs false
	sources {
		include '**/index.adoc'
	}
	resources {
		from(sourceDir) {
			include '**/images/**'
		}
	}

	backends 'html5'

	// The PDF backend currently does not work on Linux
	// see https://github.com/junit-team/junit5/issues/1099
	if (Os.isFamily(Os.FAMILY_WINDOWS) || Os.isFamily(Os.FAMILY_MAC)) {
		backends 'pdf'
	}

	attributes	'jupiter-version': project.property('version'),
				'platform-version': project.property('platformVersion'),
				'vintage-version': project.property('vintageVersion'),
				'junit4-version': project.property('junit4Version'),
				'apiguardian-version': project.property('apiGuardianVersion'),
				'ota4j-version': project.property('ota4jVersion'),
				'release-branch': project.property('releaseBranch'),
				'docs-version': project.property('docsVersion'),
				'revnumber' : project.version,
				'mainDir': project.sourceSets.main.java.srcDirs[0],
				'testDir': project.sourceSets.test.java.srcDirs[0],
				'consoleLauncherOptionsFile': consoleLauncherOptionsFile.toString(),
				'experimentalApisTableFile': experimentalApisTableFile.toString(),
				'testResourcesDir': project.sourceSets.test.resources.srcDirs[0],
				'outdir': outputDir.absolutePath,
				'source-highlighter': 'coderay@', // TODO switch to 'rouge' once supported by the html5 backend and on MS Windows
				'tabsize': '4',
				'toc': 'left',
				'icons': 'font',
				'sectanchors': true,
				'idprefix': '',
				'idseparator': '-'
	if (gradle.ext.kotlinIsSupported) {
		attributes.put('kotlinTestDir', project.sourceSets.test.kotlin.srcDirs[0])
	}
}
