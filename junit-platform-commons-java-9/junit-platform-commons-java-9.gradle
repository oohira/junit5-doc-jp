dependencies {
	// This is project we are extending.
	implementation(project(':junit-platform-commons'))

	// Needed for testing.
	testImplementation(project(':junit-platform-launcher'))
	testImplementation(project(':junit-jupiter-api'))
	testImplementation(project(':junit-jupiter-engine'))
	testImplementation("junit:junit:${junit4Version}")

	// Required by :execNoJavaScripting
	testRuntimeOnly(project(':junit-platform-console'))
	testRuntimeOnly(project(':junit-vintage-engine'))
}

// Compiles against the public, supported and documented Java 9 API.
javacRelease = 9

// https://github.com/schauder/degraph/issues/87
tasks.withType(de.obqo.gradle.degraph.DegraphTask) {
	it.enabled = false
}

test {
	useJUnitPlatform()
	// Exclude "integration" package from default "class-path based" test run.
	// Tests in the "integration" package assume to be run on the module-path.
	exclude 'integration/**'
}

// Create "junit-commons-integration-tests.jar" archive which will be later
// mounted as an automatic jar into the integration test module-path.
task generateIntegrationTestsJar(type: Jar, dependsOn: compileTestJava) {
	archiveName = 'junit-commons-integration-tests.jar'
	from compileTestJava.destinationDir
	include('integration/**/*')
}

// Copy runtime dependencies to a single directory.
task generateDependenciesDirectory(type: Copy) {
	into "$buildDir/deps"
	from configurations.testRuntimeClasspath
}

// Execute console launcher on the module-path.
task execScanModulepath(type: Exec, dependsOn: [generateDependenciesDirectory, generateIntegrationTestsJar]) {
	executable = "${System.properties['java.home']}/bin/java"
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
	args = [
			'--module-path', files(
					generateDependenciesDirectory.destinationDir,
					generateIntegrationTestsJar.archivePath
				).asPath,
			'--add-modules', 'ALL-MODULE-PATH,ALL-DEFAULT',
			'--module', 'org.junit.platform.console',
			'--scan-modules'
	]
}

task testScanModulepath(dependsOn: execScanModulepath) {
	doLast {
		String text = execScanModulepath.errorOutput.toString() + execScanModulepath.standardOutput.toString()
		// tree node names
		assert text.contains('JUnit Vintage')
		assert text.contains('VintageIntegrationTest')
		assert text.contains('successfulTest')
		assert text.contains('JUnit Jupiter')
		assert text.contains('JupiterIntegrationTests')
		assert text.contains('version()')
		assert text.contains('moduleIsNamed()')
		assert text.contains('packageName()')
		assert text.contains('javaScriptingModuleIsAvailable()')
		// summary
		assert text.contains('Test run finished after')
		// container summary
		assert text.contains('4 containers found')
		assert text.contains('0 containers skipped')
		assert text.contains('4 containers started')
		assert text.contains('0 containers aborted')
		assert text.contains('4 containers successful')
		assert text.contains('0 containers failed')
		// tests summary
		assert text.contains('6 tests found')
		assert text.contains('0 tests skipped')
		assert text.contains('6 tests started')
		assert text.contains('0 tests aborted')
		assert text.contains('6 tests successful')
		assert text.contains('0 tests failed')
	}
}

// Execute console launcher on the module-path w/o "java.scripting"
task execNoJavaScripting(type: Exec, dependsOn: [generateDependenciesDirectory, generateIntegrationTestsJar]) {
	ignoreExitValue = true
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
	executable = "${System.properties['java.home']}/bin/java"
	args = [
			'--show-module-resolution',
			'--module-path', files(generateDependenciesDirectory.destinationDir, generateIntegrationTestsJar.archivePath).asPath,
			// only "java.base" and "java.logging" are visible
			'--limit-modules', 'java.base',
			'--limit-modules', 'java.logging',
			// system modules
			//   '--add-modules', 'java.scripting',
			//   '--add-modules', 'jdk.scripting.nashorn',
			//   '--add-modules', 'jdk.dynalink',
			// "JUnit 5" modules
			'--add-modules', 'org.junit.platform.commons',
			'--add-modules', 'org.junit.platform.engine',
			'--add-modules', 'org.junit.platform.launcher',
			'--add-modules', 'org.junit.jupiter.api',
			'--add-modules', 'org.junit.jupiter.engine',
			'--add-modules', 'org.opentest4j',
			'--add-modules', 'org.apiguardian.api',
			// local module containing tests
			'--add-modules', 'junit.commons.integration.tests',
			// console launcher with arguments
			'--module', 'org.junit.platform.console',
			'--scan-modules'
	]
}

task testNoJavaScripting(dependsOn: execNoJavaScripting) {
	doLast {
		String text = execNoJavaScripting.errorOutput.toString() + execNoJavaScripting.standardOutput.toString()
		// tree node names
		assert text.contains('JUnit Jupiter')
		assert text.contains('JupiterIntegrationTests')
		assert text.contains('version()')
		assert text.contains('moduleIsNamed()')
		assert text.contains('packageName()')
		assert text.contains('javaScriptingModuleIsAvailable()')
		assert text.contains('Failed to evaluate condition')
		assert text.contains('Class `javax.script.ScriptEngine` is not loadable')
		assert text.contains('script-based test execution is disabled')
		// summary
		assert text.contains('Test run finished after')
		// container summary
		assert text.contains('2 containers found')
		assert text.contains('0 containers skipped')
		assert text.contains('2 containers started')
		assert text.contains('0 containers aborted')
		assert text.contains('2 containers successful')
		assert text.contains('0 containers failed')
		// tests summary
		assert text.contains('5 tests found')
		assert text.contains('0 tests skipped')
		assert text.contains('5 tests started')
		assert text.contains('0 tests aborted')
		assert text.contains('4 tests successful')
		assert text.contains('1 tests failed')
	}
}

test.dependsOn testScanModulepath
test.dependsOn testNoJavaScripting
