apply plugin: 'maven'
apply plugin: 'signing'

def isSnapshot = project.version.contains('SNAPSHOT')
def isContinuousIntegrationEnvironment = Boolean.parseBoolean(System.getenv('CI'))
def isJitPackEnvironment = Boolean.parseBoolean(System.getenv('JITPACK'))
def signArtifacts = !(isSnapshot || isContinuousIntegrationEnvironment || isJitPackEnvironment)

afterEvaluate {
	if (signArtifacts && uploadArchives.enabled) {
		signing {
			sign configurations.archives
		}
	}
}

uploadArchives {

	dependsOn check

	repositories {
		mavenDeployer {

			if (signArtifacts) {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}

			def ossrhUsername = rootProject.hasProperty('ossrhUsername') ? rootProject.ossrhUsername : ''
			def ossrhPassword = rootProject.hasProperty('ossrhPassword') ? rootProject.ossrhPassword : ''

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}
		}
	}
}

def projectLicense = licenseOf(project)
def mavenInstaller = install.repositories.mavenInstaller
def mavenDeployer = uploadArchives.repositories.mavenDeployer

[mavenInstaller, mavenDeployer]*.pom {
	project {
		packaging 'jar'
		description "Module \"${project.name}\" of JUnit 5."
		url 'http://junit.org/junit5/'

		scm {
			connection 'scm:git:git://github.com/junit-team/junit5.git'
			developerConnection 'scm:git:git://github.com/junit-team/junit5.git'
			url 'https://github.com/junit-team/junit5'
		}

		licenses {
			license {
				name projectLicense['name']
				url projectLicense['url']
			}
		}

		developers {
			developer {
				id 'bechte'
				name 'Stefan Bechtold'
				email 'stefan.bechtold@me.com'
			}
			developer {
				id 'jlink'
				name 'Johannes Link'
				email 'business@johanneslink.net'
			}
			developer {
				id 'marcphilipp'
				name 'Marc Philipp'
				email 'mail@marcphilipp.de'
			}
			developer {
				id 'mmerdes'
				name 'Matthias Merdes'
				email 'Matthias.Merdes@heidelberg-mobil.com'
			}
			developer {
				id 'sbrannen'
				name 'Sam Brannen'
				email 'sam@sambrannen.com'
			}
			developer {
				id 'sormuras'
				name 'Christian Stein'
				email 'sormuras@gmail.com'
			}
		}
	}
	whenConfigured {
		// set name lazily to get access to description from subprojects
		name = project.description ?: "${project.group}:${project.name}"
		dependencies = dependencies.findAll { dep -> dep.scope != 'test' }
	}
}
