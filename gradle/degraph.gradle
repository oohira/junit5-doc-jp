import static de.schauderhaft.degraph.check.JCheck.customClasspath
import static de.schauderhaft.degraph.check.JCheck.violationFree
import static org.hamcrest.MatcherAssert.assertThat
import static org.hamcrest.Matchers.is

import de.schauderhaft.degraph.configuration.NamedPattern

buildscript {
	repositories {
		mavenCentral()
		}
		dependencies {
			classpath "de.schauderhaft.degraph:degraph-check:${degraphVersion}"
		}
}

task degraph(type: DegraphCheck) {
	reportFile = new File(buildDir, "reports/degraph/testResult.graphml")
	classpath = sourceSets.main.output // TODO Replace with: files(sourceSets.main.java.outputDir) ?
}

check.dependsOn degraph

class DegraphCheck extends DefaultTask {

	@InputFiles
	FileCollection classpath

	@OutputFile
	File reportFile

	@TaskAction
	void runDegraph() {
		def graph = customClasspath(classpath.asPath)
			.printTo(reportFile.getPath())
			.noJars()
			.including("org.junit.platform.**")
			.including("org.junit.vintage.**")
			.including("org.junit.jupiter.**")
			.withSlicing("module",
				new NamedPattern("org.junit.vintage.engine.**", "junit-vintage-engine"),
				new NamedPattern("org.junit.jupiter.api.**", "junit-jupiter-api"),
				new NamedPattern("org.junit.jupiter.engine.**", "junit-jupiter-engine"),
				"org.junit.platform.(*).**"
			)
		assertThat(graph, is(violationFree()))
	}

}
